[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cot-safepath-filter"
version = "0.1.0"
description = "Real-time middleware that intercepts and sanitizes chain-of-thought reasoning to prevent harmful or deceptive reasoning patterns from leaving the sandbox."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "safety@terragonlabs.com"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "safety@terragonlabs.com"}
]
keywords = [
    "ai-safety",
    "chain-of-thought",
    "filtering",
    "security",
    "llm",
    "reasoning",
    "middleware",
    "safepath"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "redis>=4.5.0",
    "celery>=5.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "asyncio-throttle>=1.0.0",
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "opentelemetry-instrumentation-fastapi>=0.39.0",
    "tenacity>=8.2.0",
    "click>=8.1.0",
    "rich>=13.4.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
    "commitizen>=3.6.0",
    "bump2version>=1.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.24.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "semgrep>=1.32.0",
    "pip-audit>=2.6.0",
]
performance = [
    "locust>=2.15.0",
    "py-spy>=0.3.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
]
integrations = [
    "langchain>=0.0.240",
    "openai>=0.27.0",
    "anthropic>=0.3.0",
    "autogen-agentchat>=0.1.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.22.0",
]
all = [
    "cot-safepath-filter[dev,test,security,performance,integrations,docs]"
]

[project.urls]
Homepage = "https://github.com/terragonlabs/cot-safepath-filter"
Documentation = "https://docs.terragonlabs.com/cot-safepath"
Repository = "https://github.com/terragonlabs/cot-safepath-filter"
Issues = "https://github.com/terragonlabs/cot-safepath-filter/issues"
Changelog = "https://github.com/terragonlabs/cot-safepath-filter/blob/main/CHANGELOG.md"

[project.scripts]
safepath = "cot_safepath.cli:main"
safepath-server = "cot_safepath.server:main"
safepath-monitor = "cot_safepath.monitoring:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
cot_safepath = ["py.typed", "*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cot_safepath"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "transformers",
    "torch",
    "numpy",
    "sklearn",
    "pandas",
    "redis",
    "celery",
]

# Ruff configuration
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
]
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S311"]
"docs/*" = ["S101"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "sklearn.*",
    "pandas.*",
    "redis.*",
    "celery.*",
    "langchain.*",
    "openai.*",
    "anthropic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/cot_safepath",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", ".venv", "venv"]
skips = ["B101", "B601"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/cot_safepath/__init__.py:__version__",
]
bump_message = "bump: version $current_version â†’ $new_version"