# Security Scanning Workflow Template
# Copy this file to .github/workflows/security-scan.yml

name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: "3.11"

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[security]"
        
    - name: Run Safety scan
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc || true
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[security]"
        
    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll || true
        
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"
        
    - name: Upload SAST results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-results
        path: |
          bandit-report.json
          semgrep.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install detect-secrets
      run: |
        pip install detect-secrets
        
    - name: Run detect-secrets
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline --force-use-all-plugins || true
        detect-secrets audit .secrets.baseline || true

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: cot-safepath-filter:security-scan
        target: production
        load: true
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cot-safepath-filter:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"
        pip install pip-licenses
        
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical
        
    - name: Upload license scan results
      uses: actions/upload-artifact@v3
      with:
        name: license-scan-results
        path: licenses.json

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"
        pip install cyclonedx-bom
        
    - name: Generate SBOM
      run: |
        cyclonedx-py --format json --output sbom.json
        cyclonedx-py --format xml --output sbom.xml
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: |
          sbom.json
          sbom.xml

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, license-scan, sbom-generation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job results
        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ Dependency scan: PASSED" >> security-summary.md
        else
          echo "❌ Dependency scan: FAILED" >> security-summary.md
        fi
        
        if [ "${{ needs.sast-scan.result }}" = "success" ]; then
          echo "✅ SAST scan: PASSED" >> security-summary.md
        else
          echo "❌ SAST scan: FAILED" >> security-summary.md
        fi
        
        if [ "${{ needs.secret-scan.result }}" = "success" ]; then
          echo "✅ Secret scan: PASSED" >> security-summary.md
        else
          echo "❌ Secret scan: FAILED" >> security-summary.md
        fi
        
        if [ "${{ needs.container-scan.result }}" = "success" ]; then
          echo "✅ Container scan: PASSED" >> security-summary.md
        else
          echo "❌ Container scan: FAILED" >> security-summary.md
        fi
        
        if [ "${{ needs.license-scan.result }}" = "success" ]; then
          echo "✅ License scan: PASSED" >> security-summary.md
        else
          echo "❌ License scan: FAILED" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Artifacts Generated" >> security-summary.md
        echo "- SBOM (Software Bill of Materials)" >> security-summary.md
        echo "- Vulnerability reports" >> security-summary.md
        echo "- License compliance report" >> security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Notify security results
      if: github.event_name == 'schedule' && failure()
      run: |
        curl -X POST \
          -H 'Content-type: application/json' \
          --data '{"text":"🔒 Security scan failed for ${{ github.repository }}\nView details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}